package ai

import (
	"context"
	"fmt"
	"strings"

	"github.com/wedaa-tech/inkreaders-social-hub/inkreaders-backend/internal/db"
)

type Stub struct{}

func NewStub() *Stub { return &Stub{} }

func (s *Stub) Generate(ctx context.Context, p GenerateParams) (GenerateOut, error) {
	return GenerateOut{
		InferredTitle:  ifEmpty(p.Title, "Exercise Set"),
		InferredFormat: "mcq",
		Questions: []db.Question{
			{
				Type:          "mcq",
				Prompt:        "Stub question?",
				Options:       []string{"A", "B"},
				CorrectAnswer: "A",
				Explanation:   "Because A.",
			},
		},
	}, nil
}

func (s *Stub) Remix(ctx context.Context, p RemixParams) (db.ExerciseSet, error) {
	return db.ExerciseSet{
		Title:     p.Parent.Title + " (Remix)",
		Format:    p.Parent.Format,
		Questions: p.Parent.Questions,
		Meta: db.ExerciseMeta{
			Difficulty: p.Parent.Meta.Difficulty,
			Language:   p.Parent.Meta.Language,
			Source:     db.ExerciseSource{Type: "remix"},
		},
		Visibility: "private",
	}, nil
}

// Explain returns a canned explanation (used when AI_STUB=true).
func (s *Stub) Explain(ctx context.Context, questionID string, prompt string, answer any) (string, error) {
	ansStr := fmt.Sprintf("%v", answer)
	if ansStr == "<nil>" {
		ansStr = ""
	}

	// Simple language mirroring stub:
	if containsHindi(prompt) {
		return "‡§Ø‡§π ‡§è‡§ï ‡§∏‡•ç‡§ü‡§¨ ‡§â‡§§‡•ç‡§§‡§∞ ‡§π‡•à‡•§ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï AI ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂ ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§¶‡•á‡§ó‡§æ‡•§", nil
	}
	if containsTelugu(prompt) {
		return "‡∞á‡∞¶‡∞ø ‡∞í‡∞ï ‡∞∏‡±ç‡∞ü‡∞¨‡±ç ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç. ‡∞®‡∞ø‡∞ú‡∞Æ‡±à‡∞® AI ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞≤‡±ã ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", nil
	}
	if containsBangla(prompt) {
		return "‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡¶æ‡¶¨ ‡¶â‡¶§‡ßç‡¶§‡¶∞‡•§ ‡¶™‡ßç‡¶∞‡¶ï‡ßÉ‡¶§ AI ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶¨‡ßá‡•§", nil
	}

	// Default English
	return fmt.Sprintf("Stub explanation for %s: The answer is %s.", questionID, ansStr), nil
}


// GenerateResponse returns a canned AI response for Notebook (stub mode).
func (s *Stub) GenerateResponse(ctx context.Context, prompt string) (string, error) {
	return fmt.Sprintf("üìí Stub AI response for: %s\n\nThis is a placeholder response. In production, the AI will generate a complete answer.", prompt), nil
}

func ifEmpty(s, def string) string {
	if s == "" {
		return def
	}
	return s
}


func containsHindi(s string) bool {
	return strings.ContainsAny(s, "‡§Ö‡§Ü‡§á‡§à‡§â‡§ä‡§è‡§ê‡§ì‡§î‡§ï‡§ñ‡§ó‡§ò‡§ô‡§ö‡§õ‡§ú‡§ù‡§û‡§ü‡§†‡§°‡§¢‡§£‡§§‡§•‡§¶‡§ß‡§®‡§™‡§´‡§¨‡§≠‡§Æ‡§Ø‡§∞‡§≤‡§µ‡§∂‡§∑‡§∏‡§π") // Devanagari range
}

func containsTelugu(s string) bool {
	return strings.ContainsAny(s, "‡∞Ö‡∞Ü‡∞á‡∞à‡∞â‡∞ä‡∞é‡∞è‡∞ê‡∞í‡∞ì‡∞î‡∞ï‡∞ñ‡∞ó‡∞ò‡∞ô‡∞ö‡∞õ‡∞ú‡∞ù‡∞û‡∞ü‡∞†‡∞°‡∞¢‡∞£‡∞§‡∞•‡∞¶‡∞ß‡∞®‡∞™‡∞´‡∞¨‡∞≠‡∞Æ‡∞Ø‡∞∞‡∞≤‡∞µ‡∞∂‡∞∑‡∞∏‡∞π") // Telugu
}

func containsBangla(s string) bool {
	return strings.ContainsAny(s, "‡¶Ö‡¶Ü‡¶á‡¶à‡¶â‡¶ä‡¶ã‡¶è‡¶ê‡¶ì‡¶î‡¶ï‡¶ñ‡¶ó‡¶ò‡¶ô‡¶ö‡¶õ‡¶ú‡¶ù‡¶û‡¶ü‡¶†‡¶°‡¶¢‡¶£‡¶§‡¶•‡¶¶‡¶ß‡¶®‡¶™‡¶´‡¶¨‡¶≠‡¶Æ‡¶Ø‡¶∞‡¶≤‡¶∂‡¶∑‡¶∏‡¶π") // Bengali
}
